{"version":3,"file":"next-shield.cjs.production.min.js","sources":["../src/libs/routes.ts","../src/components/ComponentShield.tsx","../src/components/NextShield.tsx"],"sourcesContent":["import { RoleAccess } from '../types/props'\n\nexport function verifyPath(routes: string[] | undefined, uri: string) {\n  return routes?.some(route => route === uri)\n}\n\nexport function getAccessRoute(\n  RBAC: RoleAccess<string[]> | undefined,\n  userRole: string | undefined,\n  accessRoute: string | undefined\n) {\n  if (typeof accessRoute !== 'undefined') return accessRoute\n\n  if (RBAC && userRole) return RBAC[userRole].accessRoute\n\n  return '/'\n}\n","import React from 'react'\n\nimport {\n  ComponentShieldAuthProps,\n  ComponentShieldBaseProps,\n  ComponentShieldRBACProps,\n  ComponentShieldProps,\n} from '../types/Component'\n\n/**\n * üõ°Ô∏è A Shield for your Components, it handles when a component shows or not based on the auth state or the user's role\n *\n * @param ComponentShieldProps {@link ComponentShieldProps | see here}\n * @returns Children Components | {@link JSX.Element}\n *\n *\n * @example\n * ```tsx\n *  // Basic Example\n *  <ComponentShield showIf={true}>\n *    <p>You are authorized</p>\n *  </ComponentShield>\n *\n *  // Fallback Example\n *  <ComponentShield showIf={false} fallback={<p>You are unauthorized</p>}>\n *    <p>You are authorized</p>\n *  </ComponentShield>\n *\n *  // RBAC Example\n *  <ComponentShield RBAC showForRole=\"ADMIN\" userRole=\"ADMIN\">\n *    <p>You are an ADMIN</p>\n *  </ComponentShield>\n * ```\n *\n * @packageDocumentation\n */\n\nexport function ComponentShield(props: ComponentShieldBaseProps): JSX.Element\nexport function ComponentShield(props: ComponentShieldAuthProps): JSX.Element\nexport function ComponentShield(props: ComponentShieldRBACProps): JSX.Element\nexport function ComponentShield(props: ComponentShieldProps) {\n  const { showForRole, showIf, fallback = null, RBAC, userRole, children } = props\n\n  if (RBAC) return <>{showForRole === userRole ? children : null}</>\n  if (showIf) return <>{children}</>\n\n  return <>{fallback}</>\n}\n\n// function Debug() {\n//   return (\n//     <>\n// <ComponentShield showIf={true}>\n//   <p>Default</p>\n// </ComponentShield>\n//       <ComponentShield RBAC showForRole=\"\" userRole=\"\">\n//         <p>RBAC</p>\n//       </ComponentShield>\n//     </>\n//   )\n// }\n","import React, { ReactNode, useEffect } from 'react'\n\nimport { NextShieldProps } from '../types/props'\nimport { verifyPath, getAccessRoute } from '../libs/routes'\n\n/**\n * üòâ The shield that every Next.js app needs\n *\n * @typeParam NextShieldProps - {@link NextShieldProps | see here}\n * @returns NextShield Component\n *\n * @example\n * ```tsx\n * import { Loading } from '@/components/routes/Loading'\n * import { useAuth } from '@/hooks/auth'\n *\n * export default function MyApp({ Component, pageProps }: AppProps) {\n *  const { isAuth, isLoading } = useAuth()\n *  const router = useRouter()\n *\n *  return (\n *    <NextShield\n *      isAuth={isAuth}\n *      isLoading={isLoading}\n *      router={router}\n *      privateRoutes={['/protected']}\n *      publicRoutes={['/']}\n *      hybridRoutes={['/products/[slug]']}\n *      LoadingComponent={<Loading />}\n *    >\n *      <Component {...pageProps} />\n *    </NextShield>\n *   )\n * }\n *\n * ```\n * @packageDocumentation\n */\n\nexport function NextShield<\n  PrivateRoutesList extends string[],\n  PublicRoutesList extends string[]\n>({\n  isAuth,\n  isLoading,\n  router: { pathname, replace },\n  loginRoute,\n  accessRoute,\n  privateRoutes,\n  publicRoutes,\n  hybridRoutes,\n  LoadingComponent,\n  RBAC,\n  userRole,\n  children,\n}: NextShieldProps<PrivateRoutesList, PublicRoutesList> & { children: ReactNode }) {\n  const pathIsPrivate = verifyPath(privateRoutes, pathname)\n  const pathIsPublic = verifyPath(publicRoutes, pathname)\n  const pathIsHybrid = verifyPath(hybridRoutes, pathname)\n  const pathIsAuthorized =\n    RBAC && userRole && verifyPath(RBAC[userRole].grantedRoutes, pathname)\n  const access = getAccessRoute(RBAC, userRole, accessRoute)\n\n  useEffect(() => {\n    if (!isAuth && !isLoading && pathIsPrivate) replace(loginRoute)\n    if (isAuth && !isLoading && pathIsPublic) replace(access)\n    if (isAuth && userRole && !isLoading && !pathIsHybrid && !pathIsAuthorized)\n      replace(access)\n  }, [\n    replace,\n    userRole,\n    access,\n    isAuth,\n    isLoading,\n    loginRoute,\n    pathIsPrivate,\n    pathIsPublic,\n    pathIsHybrid,\n    pathIsAuthorized,\n  ])\n\n  if (\n    ((isLoading || !isAuth) && pathIsPrivate) ||\n    ((isLoading || isAuth) && pathIsPublic) ||\n    ((isLoading || userRole) && !pathIsAuthorized && !pathIsHybrid) ||\n    (isLoading && pathIsHybrid)\n  )\n    return <>{LoadingComponent}</>\n\n  return <>{children}</>\n}\n"],"names":["verifyPath","routes","uri","some","route","props","fallback","children","React","RBAC","showForRole","userRole","showIf","isAuth","isLoading","router","pathname","replace","loginRoute","accessRoute","publicRoutes","hybridRoutes","LoadingComponent","pathIsPrivate","privateRoutes","pathIsPublic","pathIsHybrid","pathIsAuthorized","grantedRoutes","access","getAccessRoute","useEffect"],"mappings":"6JAEgBA,EAAWC,EAA8BC,gBAChDD,SAAAA,EAAQE,MAAK,SAAAC,UAASA,IAAUF,sCCqCTG,SAC6CA,EAA9CC,SAAiCC,EAAaF,EAAbE,gBAE7CC,gCAF0DH,EAA7BI,KAA6BJ,EAAnEK,cAAmEL,EAAvBM,SAELJ,EAAW,KAFiBF,EAAtDO,OAGCL,aAHkB,4CCExCM,IAAAA,OACAC,IAAAA,cACAC,OAAUC,IAAAA,SAAUC,IAAAA,QACpBC,IAAAA,WACAC,IAAAA,YAEAC,IAAAA,aACAC,IAAAA,aACAC,IAAAA,iBACAb,IAAAA,KACAE,IAAAA,SACAJ,IAAAA,SAEMgB,EAAgBvB,IARtBwB,cAQgDR,GAC1CS,EAAezB,EAAWoB,EAAcJ,GACxCU,EAAe1B,EAAWqB,EAAcL,GACxCW,EACJlB,GAAQE,GAAYX,EAAWS,EAAKE,GAAUiB,cAAeZ,GACzDa,EFvDR,SACEpB,EACAE,EACAQ,eAE2B,IAAhBA,EAAoCA,EAE3CV,GAAQE,EAAiBF,EAAKE,GAAUQ,YAErC,IE8CQW,CAAerB,EAAME,EAAUQ,UAE9CY,aAAU,WACHlB,GAAWC,IAAaS,GAAeN,EAAQC,GAChDL,IAAWC,GAAaW,GAAcR,EAAQY,IAC9ChB,IAAUF,GAAaG,GAAcY,GAAiBC,GACxDV,EAAQY,KACT,CACDZ,EACAN,EACAkB,EACAhB,EACAC,EACAI,EACAK,EACAE,EACAC,EACAC,IASOnB,iCALLM,IAAcD,IAAWU,IACzBT,GAAaD,IAAWY,IACxBX,GAAaH,KAAcgB,IAAqBD,GACjDZ,GAAaY,EAEJJ,EAEFf"}